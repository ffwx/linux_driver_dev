{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u8bfe\u7a0b\u7b80\u4ecb","text":""},{"location":"#_1","title":"\u6c47\u603b","text":"<ul> <li>Linux \u9a71\u52a8\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c</li> <li>Linux \u9a71\u52a8\u65f6\u95f4\u64cd\u4f5c</li> </ul>"},{"location":"about/","title":"\u5173\u4e8e\u4f5c\u8005","text":"<p>\u6ca1\u6709\u6267\u884c\u529b, \u5c31\u6ca1\u6709\u7ade\u4e89\u529b</p>"},{"location":"Lectures/2024-08-11_file_ops/","title":"linux \u9a71\u52a8\u6587\u4ef6\u64cd\u4f5c","text":""},{"location":"Lectures/2024-08-11_file_ops/#linux","title":"Linux \u9a71\u52a8\u4e2d\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c","text":"<p>\u793a\u4f8b</p> <pre><code>#include &lt;linux/fs.h&gt;\n#include &lt;linux/module.h&gt;\n#include &lt;linux/time.h&gt;\n\nstatic void get_timestamp_str(char *buf, uint32_t buf_size)\n{\n    struct timespec64 now;\n    struct tm cur_tm;\n    ktime_get_real_ts64(&amp;now);\n\n    time64_to_tm(now.tv_sec, 0, &amp;cur_tm);\n\n    snprintf(buf, buf_size, \"%04d%02d%02d_%02d_%02d_%02d\\n\",\n            (int)(cur_tm.tm_year + 1900), cur_tm.tm_mon + 1, cur_tm.tm_mday,\n            cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n\n    printk(\"time: %04d%02d%02d_%02d_%02d_%02d\\n\",\n           (int)(cur_tm.tm_year + 1900), cur_tm.tm_mon + 1, cur_tm.tm_mday, cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n}\n\nstatic void generate_file_name(char *buf, uint32_t buf_size)\n{\n    struct timespec64 now;\n    struct tm cur_tm;\n\n    ktime_get_real_ts64(&amp;now);\n    time64_to_tm(now.tv_sec, 0, &amp;cur_tm);\n\n    snprintf(buf, buf_size, \"log_%04d%02d%02d_%02d%02d%02d.txt\",\n            (int)(cur_tm.tm_year + 1900), cur_tm.tm_mon + 1, cur_tm.tm_mday,\n            cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n}\n\nstatic int __init file_ops_init(void)\n{\n    struct file *file;\n    char *message = \"Hello, world!\\n\";\n    loff_t pos;\n    ssize_t written;\n\n    uint32_t i;\n    char buf[20];\n    char fn[32];\n\n    get_timestamp_str(buf, 20);\n    snprintf(fn, 32, \"log_%s.txt\", buf);\n\n    printk(KERN_INFO \"Hi, file ops!, %s\\n\");\n    printk(KERN_INFO \"file name: %s\", fn);\n\n    for (i = 0; i &lt; 100; i++) {\n        file = filp_open(fn, O_CREAT | O_RDWR | O_APPEND, 0644);\n        if (IS_ERR(file)) {\n            printk(KERN_ERR \"open file failed\\n\");\n            return -1;\n        }\n\n        written = kernel_write(file, message, strlen(message), &amp;pos);\n        if (written &lt; 0) {\n            printk(KERN_ERR \"write to file failed\\n\");\n            filp_close(file, NULL);\n            return -1;\n        }\n\n        filp_close(file, NULL);\n    }\n\n    return 0;\n}\n\nstatic void __exit file_ops_exit(void)\n{\n    printk(KERN_INFO \"Goodbye, file ops!\\n\");\n}\n\nmodule_init(file_ops_init);\nmodule_exit(file_ops_exit);\n\nMODULE_LICENSE(\"GPL\");\n</code></pre>"},{"location":"Lectures/2024-08-11_time_ops/","title":"linux \u9a71\u52a8\u65f6\u95f4\u64cd\u4f5c","text":""},{"location":"Lectures/2024-08-11_time_ops/#linux","title":"Linux \u9a71\u52a8\u65f6\u95f4\u76f8\u5173\u5904\u7406","text":"<pre><code>#include &lt;linux/fs.h&gt;\n#include &lt;linux/module.h&gt;\n#include &lt;linux/time.h&gt;\n\n#include &lt;linux/rtc.h&gt;\n\nstatic void get_timestamp_str_1(char *buf, uint32_t buf_size)\n{\n    ktime_t k_time;\n    struct rtc_time cur_tm;\n    k_time = ktime_get_real();\n    cur_tm = rtc_ktime_to_tm(k_time);\n\n    snprintf(buf, buf_size, \"%04d%02d%02d_%02d_%02d_%02d\\n\",\n            (int)(cur_tm.tm_year + 1900), cur_tm.tm_mon + 1, cur_tm.tm_mday,\n            cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n\n    printk(\"time: %04d%02d%02d_%02d_%02d_%02d\\n\",\n           cur_tm.tm_year+1900, cur_tm.tm_mon + 1, cur_tm.tm_mday,\n           cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n}\n\nstatic void get_timestamp_str_2(char *buf, uint32_t buf_size)\n{\n    struct timespec64 now;\n    struct tm cur_tm;\n    ktime_get_real_ts64(&amp;now);\n\n    time64_to_tm(now.tv_sec, 0, &amp;cur_tm);\n\n    snprintf(buf, buf_size, \"%04d%02d%02d_%02d_%02d_%02d\\n\",\n            (int)(cur_tm.tm_year + 1900), cur_tm.tm_mon + 1, cur_tm.tm_mday,\n            cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n\n    printk(\"time: %04d%02d%02d_%02d_%02d_%02d\\n\",\n           (int)(cur_tm.tm_year + 1900), cur_tm.tm_mon + 1, cur_tm.tm_mday, cur_tm.tm_hour + 8, cur_tm.tm_min, cur_tm.tm_sec);\n}\n\nstatic int __init time_ops_init(void)\n{\n    char buf[20];\n\n    get_timestamp_str_1(buf, 20);\n    // snprintf(fn, 32, \"log_%s.txt\", buf);\n\n    printk(KERN_INFO \"Hi, Time!, Time is: %s\\n\", buf);\n\n    return 0;\n}\n\nstatic void __exit time_ops_exit(void)\n{\n    char buf[20];\n\n    get_timestamp_str_2(buf, 20);\n    // snprintf(fn, 32, \"log_%s.txt\", buf);\n\n    printk(KERN_INFO \"Goodbye, Time is: %s\\n\", buf);\n}\n\nmodule_init(time_ops_init);\nmodule_exit(time_ops_exit);\n\nMODULE_LICENSE(\"GPL\");\n</code></pre>"}]}